#!/bin/bash

#Global Variables
WORKDIR=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")
TWEAKCONFIG=$(cat "$WORKDIR/config/gputweak.json")
NV_COOLBITS=12
TEST=0
VERBOSE=0
DISPLAY=10
PCI_REGEX='/\(VGA compatible\|3D controller\).*\(AMD\|\NVIDIA\)/s/^\(..\):\(..\).\(.\).*/0x\1:0x\2:0x\3/p'
SYSID_REGEX='\s(VGA compatible|3D controller).*(AMD|NVIDIA)'

#Executable placeholder
NVSMI='/usr/bin/nvidia-smi'
NVSET='/usr/bin/nvidia-settings'
ROCSMI='/usr/bin/rocm-smi'

function usage
{
    echo "Usage: gputweak [-v|--verbose] [-h|--help] [OPTIONS]"
    echo " -v | --verbose   : output verbose"
    echo " -h | --help      : this message"
    echo ""
    echo " OPTIONS"
    echo "  --test           : Test mode, no tweak is run. Using"
    echo "                      NVIDIA  10de:1b81 10de:119d device"
    echo "                      AMD     1002:67df 1462:3417 device"
    echo "  --coolbits       : set NVIDIA coolbits, default is 12"
    echo "  --nvsmi          : set nvidia-smi executable path, default /usr/bin/nvidia-smi"
    echo "  --nvset          : set nvidia-settings executable path, default /usr/bin/nvidia-settings"
    echo "  --rocmsmi        : set rocm-smi executable path, default /usr/bin/rocm-smi"
    echo "  --reset          : reset and remove all tweak"
    echo "  --config         : specify gputweak config file, overwrite default. check config/gputweak.json for example"
    exit 0
}

function parse_args
{
    local _ARGS=()
    local _PCIIDS=""
    local _RESET=""

    while [ "$1" ]
    do
        case "$1" in
            "-v" | "--verbose" )
                VERBOSE=1
            ;;
            "-h" | "--help")
                usage
                exit 0
                ;;
            "--test")
                TEST=1
                PCI_REGEX='s/^\(..\):\(..\).\(.\).*/0x\1:0x\2:0x\3/p'
                SYSID_REGEX=''
                _PCIIDS=$(printf "f0:00.0\nf1:00.0")
                ;;
            "--coolbits")
                if [[ "$2" -le 31 ]]; then
                    NV_COOLBITS="$2"
                else
                    printf "NVIDIA coolbits maximum value is 31\n"
                fi
                ;;
            "--reset" )
                printf "Reset GPU configuration\n"
                _RESET=1
                ;;
            "--config" )
                TWEAKCONFIG=$(cat "$2")
                ;;            
            "--nvsmi")
                NVSMI="$2"
                ;;
            "--nvset")
                NVSET="$2"
                ;;
            "--rocmsmi")
                ROCSMI="$2"
                ;;
        esac
        shift
    done
    
    set -- "${args[@]}"

    printf "Start Tweak script using configuration:\n"
    printf "nvidia-smi executable       : ${NVSMI}\n"
    printf "nvidia-settings executable  : ${NVSET}\n"
    printf "rocm-smi executable         : ${ROCSMI}\n"

    start_tweak "${_PCIIDS}" "${_RESET}"
    exit 0
}

function start_tweak
{
    local _RESET=$2

    if [ -z "$1" ]; then
        #GET PCI ID FOR ALL NVIDIA/AMD GPU
        local _PCIIDS=$(lspci | sed -n -e "${PCI_REGEX}")
    else
        local _PCIIDS=$(sed -n -e "${PCI_REGEX}" <<< "$1")
    fi

    if [ -z "$_PCIIDS" ]; then
        printf "No recognizable AMD / NVIDIA Device\n\n"
        exit 0
    fi

    while read -r _PCIID; do
        local _PCIBUS=$(parse_pciid "${_PCIID}" "lspci")

        #GET SYSTEM ID
        local _IDS=$(lspci -vnn | grep -E "${_PCIBUS}${SYSID_REGEX}" -A1 | grep -Eo '([0-9a-z]{4}:[0-9a-z]{4})')
        local _IDS=(${_IDS[@]})

        local _SYSTEM_ID=${_IDS[0]}
        local _SUBSYSTEM_ID=${_IDS[1]}

        if [ "${TEST}" = 1 ]; then
            if [ $(($DISPLAY%2)) -eq 0 ]; then
                #Test NVIDIA
                local _SYSTEM_ID="10de:1b81"
                local _SUBSYSTEM_ID="10de:119d"
            else
                #TEST AMD
                local _SYSTEM_ID="1002:67df"
                local _SUBSYSTEM_ID="1462:3417"
            fi
        fi

        if [ -z "${_SYSTEM_ID}" ] || [ -z "${_SUBSYSTEM_ID}" ]; then
            if [ "$VERBOSE" = 1 ]; then
                printf "${_PCIBUS} device not recognize\n"
            fi
            continue
        fi

        if [ "$VERBOSE" = 1 ]; then
            printf "Tweaking device ${_SYSTEM_ID}, ${_SUBSYSTEM_ID}\n"
        fi

        #Parsing JSON config
        local _DRIVER=$(jq -r ".[] | select(.system_id==\"${_SYSTEM_ID}\" and .subsystem_id==\"${_SUBSYSTEM_ID}\") | .driver" <<< "${TWEAKCONFIG}")
        local _TWEAKS=$(jq -r ".[] | select(.system_id==\"${_SYSTEM_ID}\" and .subsystem_id==\"${_SUBSYSTEM_ID}\") | .tweaks" <<< "${TWEAKCONFIG}")
      
        if [ -z "${_DRIVER}" ] || [ -z "${_TWEAKS}" ]; then
            if [ "$VERBOSE" = 1 ]; then
                printf "Device ${_PCIBUS} with id ${_SYSTEM_ID}, subsystem id ${_SUBSYSTEM_ID} doesn't require tweak\n"
            fi
            continue
        fi

        case "${_DRIVER}" in
            "amdgpu" )
                if [ ! -z "${_RESET}" ]; then
                    _TWEAKS=( \
                         "@ROCSMI@ -d @GPUID@ -r" \
                    )
                    _TWEAKS=$(printf '%s\n' "${_TWEAKS[@]}" | jq -R . | jq -s .)
                fi

                tweak_amd "${_PCIID}" "${_TWEAKS}"
                ;;
            "nvidia" )
                if [ ! -z "${_RESET}" ]; then
                    _TWEAKS=( \
                        "@NVSET@ -a [gpu:0]/GPUGraphicsClockOffset[3]=0" \
                        "@NVSET@ -a [gpu:0]/GPUMemoryTransferRateOffset[3]=0" \
                        "@NVSMI@ -i @PCI_BUS@ -rac "  
                    )
                    _TWEAKS=$(printf '%s\n' "${_TWEAKS[@]}" | jq -R . | jq -s .)
                fi

                tweak_nvidia "${_PCIID}" "${_TWEAKS}"
                ;; 
        esac
        DISPLAY=$((DISPLAY+1))
        printf "\n"
    done <<< "${_PCIIDS}"
}

function parse_pciid
{
    local _PCIID=$1
    local _TYPE=$2
    local _PCIID_ARRAY=(${_PCIID//:/ })
    local _RESULT="${_PCIID}"

    case "${_TYPE}" in
        "xorg" )
            _RESULT=$(printf "PCI:%d:%d:%d" "${_PCIID_ARRAY[@]}")
            ;;
        "lspci" )
            _RESULT=$(printf "%02x:%02x.%0x" "${_PCIID_ARRAY[@]}")
            ;;
        "rocm" )
            _RESULT=$(printf "0000:%02x:%02x.%0x" "${_PCIID_ARRAY[@]}")
            _RESULT=$(find /sys/class/drm/card*/device/uevent -type f -print | xargs grep "${_RESULT}" | grep -o 'card\([0-9a-f]*\)' | sed -e 's/card//')
            ;;
    esac
    echo "${_RESULT}"
}

function tweak_amd
{
    local _PCIID=$1
    local _TWEAKS=$2
    local _GPUID=$(parse_pciid "${_PCIID}" "rocm")
    local _COUNT=$(echo ${_TWEAKS} | jq ". | length")
   
    if [ -z "${_GPUID}" ] && [ "${TEST}" = 0 ]; then
        printf "Device GPU not found\n"
        exit 0
    fi
 
    for (( i=0; i<${_COUNT}; i++ ))
    do
        local _CMD=$(echo ${_TWEAKS} | jq -r ".[${i}]")
        local _REALCMD=$(sed "s/@GPUID@/${_GPUID}/g;s/@ROCSMI@/${ROCSMI//\//\\/}/g" <<< "${_CMD}")
        
        if [ "$VERBOSE" = 1 ]; then
            printf "Running : ${_REALCMD}\n"
        fi
    
        if [ "${TEST}" = 0 ]; then
            /bin/bash -c "${_REALCMD}"
        fi

        wait
    done
}

function tweak_nvidia
{
    local _PCIID=$1
    local _TWEAKS=$2

    local _PCIBUS=$(parse_pciid "${_PCIID}" "lspci")
    local _COUNT=$(echo ${_TWEAKS} | jq ". | length")


    if [[ ! $(xset -q -display "${DISPLAY}") ]]; then
        start_xorg "${_PCIID}"
    fi
  
    #Prepare temporary tweak file
    local _TWEAK_CFG=$(mktemp /tmp/tweak-XXXXXXXX.sh)
    printf "#!/bin/bash\nexport DISPLAY=:${DISPLAY}\n" >> ${_TWEAK_CFG}
    for (( i=0; i<${_COUNT}; i++ ))
    do
        local _CMD=$(echo ${_TWEAKS} | jq -r ".[${i}]")
        local _REALCMD=$(sed "s/@PCI_BUS@/${_PCIBUS}/g;s/@NVSET@/${NVSET//\//\\/}/g;s/@NVSMI@/${NVSMI//\//\\/}/g" <<< "${_CMD}")
        printf "${_REALCMD}\n" >> ${_TWEAK_CFG}
    done
    
    if [ "$VERBOSE" = 1 ]; then
        printf "${_TWEAK_CFG} content\n"
        cat "${_TWEAK_CFG}"
    fi
    
    #Recheck again before applying tweak
    if [[ ! $(xset -q -display "${DISPLAY}") ]]; then
        printf "Cannot start X Server on display ${DISPLAY}, disable tweak\n"
    else
        if [ "${TEST}" = 0 ]; then
            /bin/bash -c "${_TWEAK_CFG}"
        fi
    fi
   
    #Cannot remove 
    #rm -f "${_TWEAK_CFG}"
}

function start_xorg
{
    local _PCIID=$1

    if [[ $EUID -ne 0 ]]; then
       printf "This script must be run as root\n" 
       return 0
    fi

    local _LOOP_FILE=$(mktemp /tmp/loop-XXXXXXXX.sh)
    printf "#!/bin/bash\nwhile true\ndo\nsleep 10\ndone\n" >> ${_LOOP_FILE}

    local _PCIBUS_XORG=$(parse_pciid "${_PCIID}" "xorg")

    local _XORG_CFG=$(mktemp /tmp/xorg-XXXXXXXX.conf)
    sed -e s,@GPU_BUS_ID@,"${_PCIBUS_XORG}",    \
        -e s,@SET_GPU_DIR@,"${WORKDIR}", \
        -e s,@COOLBITS@,"${NV_COOLBITS}", \
        "${WORKDIR}/config/nvidia-xorg.conf" >> "${_XORG_CFG}"

    if [ "${VERBOSE}" = 1 ]; then
        printf "xinit ${_LOOP_FILE} --  :${DISPLAY} -once -config ${_XORG_CFG} > /dev/null 2>&1 &\n"
        printf "${_XORG_CFG} content\n"
        cat "${_XORG_CFG}"
    fi

    #RUN XINIT AND TWEAK
    if [ "${TEST}" = 0 ]; then
        xinit "${_LOOP_FILE}" -- :"${DISPLAY}" -once -config "${_XORG_CFG}" > /dev/null 2>&1 &
        wait
    fi

    #Cannot remove
    #rm -f "${_XORG_CFG}"
    #rm -f "${_LOOP_FILE}"
}

function main
{
    parse_args "$@"
    exit 0
}

main "$@"
